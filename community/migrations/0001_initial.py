# Generated by Django 5.2.5 on 2025-08-26 05:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PostCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='分类名称')),
                ('slug', models.SlugField(unique=True, verbose_name='URL标识')),
                ('icon', models.CharField(blank=True, default='', max_length=100, verbose_name='分类图标')),
                ('color', models.CharField(default='#FF6B6B', max_length=7, validators=[django.core.validators.RegexValidator('^#[0-9A-Fa-f]{6}$', '请输入有效的颜色代码')], verbose_name='主题色')),
                ('sort_order', models.PositiveSmallIntegerField(default=0, verbose_name='排序')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='是否启用')),
                ('post_count', models.PositiveIntegerField(default=0, verbose_name='帖子数量')),
            ],
            options={
                'verbose_name': '帖子分类',
                'verbose_name_plural': '帖子分类',
                'db_table': 'post_categories',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('post_type', models.CharField(choices=[('image', '图文'), ('text', '纯文字'), ('video', '视频')], db_index=True, default='image', max_length=10, verbose_name='帖子类型')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='标题')),
                ('content', models.TextField(verbose_name='内容')),
                ('cover_image', models.URLField(blank=True, default='', max_length=500, verbose_name='封面图片')),
                ('location', models.CharField(blank=True, db_index=True, default='', max_length=100, verbose_name='位置')),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, verbose_name='纬度')),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, verbose_name='经度')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='浏览量')),
                ('like_count', models.PositiveIntegerField(db_index=True, default=0, verbose_name='点赞数')),
                ('comment_count', models.PositiveIntegerField(default=0, verbose_name='评论数')),
                ('collect_count', models.PositiveIntegerField(default=0, verbose_name='收藏数')),
                ('share_count', models.PositiveIntegerField(default=0, verbose_name='分享数')),
                ('hot_score', models.FloatField(db_index=True, default=0, verbose_name='热度分数')),
                ('quality_score', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='内容质量分')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('pending', '待审核'), ('reviewing', '审核中'), ('approved', '审核通过'), ('rejected', '审核拒绝'), ('hidden', '已隐藏'), ('banned', '已封禁'), ('deleted', '已删除')], db_index=True, default='pending', max_length=20, verbose_name='审核状态')),
                ('is_featured', models.BooleanField(db_index=True, default=False, verbose_name='是否精选')),
                ('is_top', models.BooleanField(db_index=True, default=False, verbose_name='是否置顶')),
                ('review_note', models.TextField(blank=True, default='', verbose_name='审核备注')),
                ('reject_reason', models.CharField(blank=True, default='', max_length=200, verbose_name='拒绝原因')),
                ('reviewed_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='审核时间')),
                ('auto_review_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='自动审核分数')),
                ('review_priority', models.PositiveSmallIntegerField(db_index=True, default=0, verbose_name='审核优先级')),
                ('violation_type', models.CharField(blank=True, default='', max_length=50, verbose_name='违规类型')),
                ('violation_count', models.PositiveSmallIntegerField(default=0, verbose_name='违规次数')),
                ('report_count', models.PositiveSmallIntegerField(default=0, verbose_name='举报次数')),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='发布时间')),
                ('last_active_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='最后活跃时间')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL, verbose_name='作者')),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_posts', to=settings.AUTH_USER_MODEL, verbose_name='审核人')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='community.postcategory', verbose_name='分类')),
            ],
            options={
                'verbose_name': '帖子',
                'verbose_name_plural': '帖子',
                'db_table': 'posts',
                'ordering': ['-is_top', '-hot_score', '-published_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('like_count', models.PositiveIntegerField(db_index=True, default=0, verbose_name='点赞数')),
                ('reply_count', models.PositiveIntegerField(default=0, verbose_name='回复数')),
                ('is_author_reply', models.BooleanField(default=False, verbose_name='是否作者回复')),
                ('is_featured', models.BooleanField(db_index=True, default=False, verbose_name='是否精选评论')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='是否删除')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('location', models.CharField(blank=True, default='', max_length=50, verbose_name='发布位置')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='评论者')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='community.comment', verbose_name='父评论')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='community.post', verbose_name='帖子')),
            ],
            options={
                'verbose_name': '评论',
                'verbose_name_plural': '评论',
                'db_table': 'comments',
                'ordering': ['-is_featured', '-like_count', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('folder', models.CharField(blank=True, default='默认收藏夹', max_length=50, verbose_name='收藏夹')),
                ('note', models.CharField(blank=True, default='', max_length=200, verbose_name='备注')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collectors', to='community.post', verbose_name='帖子')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '帖子收藏',
                'verbose_name_plural': '帖子收藏',
                'db_table': 'post_collections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('media_type', models.CharField(choices=[('image', '图片'), ('video', '视频')], max_length=10, verbose_name='媒体类型')),
                ('url', models.URLField(max_length=500, verbose_name='文件URL')),
                ('thumbnail_url', models.URLField(blank=True, default='', max_length=500, verbose_name='缩略图URL')),
                ('sort_order', models.PositiveSmallIntegerField(default=0, verbose_name='排序')),
                ('width', models.PositiveIntegerField(blank=True, null=True, verbose_name='宽度')),
                ('height', models.PositiveIntegerField(blank=True, null=True, verbose_name='高度')),
                ('duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='时长(秒)')),
                ('file_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='文件大小(字节)')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medias', to='community.post', verbose_name='帖子')),
            ],
            options={
                'verbose_name': '帖子媒体',
                'verbose_name_plural': '帖子媒体',
                'db_table': 'post_medias',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('view_count', models.PositiveSmallIntegerField(default=1, verbose_name='浏览次数')),
                ('duration', models.PositiveIntegerField(default=0, verbose_name='停留时长(秒)')),
                ('source', models.CharField(blank=True, default='', max_length=30, verbose_name='来源')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='community.post', verbose_name='帖子')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '帖子浏览记录',
                'verbose_name_plural': '帖子浏览记录',
                'db_table': 'post_views',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('content_type', models.CharField(choices=[('post', '帖子'), ('comment', '评论'), ('user', '用户'), ('topic', '话题')], db_index=True, max_length=20, verbose_name='内容类型')),
                ('content_id', models.PositiveIntegerField(db_index=True, verbose_name='内容ID')),
                ('report_type', models.CharField(choices=[('spam', '垃圾广告'), ('porn', '色情低俗'), ('violence', '暴力血腥'), ('fraud', '欺诈骗局'), ('abuse', '辱骂攻击'), ('copyright', '侵权'), ('false_info', '虚假信息'), ('other', '其他')], db_index=True, max_length=20, verbose_name='举报类型')),
                ('reason', models.TextField(verbose_name='举报理由')),
                ('evidence', models.JSONField(blank=True, default=list, verbose_name='证据材料')),
                ('status', models.CharField(choices=[('pending', '待处理'), ('processing', '处理中'), ('resolved', '已处理'), ('rejected', '已驳回'), ('ignored', '已忽略')], db_index=True, default='pending', max_length=20, verbose_name='处理状态')),
                ('handle_note', models.TextField(blank=True, default='', verbose_name='处理备注')),
                ('handled_at', models.DateTimeField(blank=True, null=True, verbose_name='处理时间')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='举报人IP')),
                ('handler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_handled', to=settings.AUTH_USER_MODEL, verbose_name='处理人')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_made', to=settings.AUTH_USER_MODEL, verbose_name='举报人')),
            ],
            options={
                'verbose_name': '举报记录',
                'verbose_name_plural': '举报记录',
                'db_table': 'reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('content_type', models.CharField(choices=[('post', '帖子'), ('topic', '话题'), ('comment', '评论')], db_index=True, max_length=20, verbose_name='内容类型')),
                ('content_id', models.PositiveIntegerField(db_index=True, verbose_name='内容ID')),
                ('action', models.CharField(choices=[('submit', '提交审核'), ('auto_approve', '自动通过'), ('auto_reject', '自动拒绝'), ('manual_approve', '人工通过'), ('manual_reject', '人工拒绝'), ('hide', '隐藏'), ('ban', '封禁'), ('restore', '恢复')], max_length=20, verbose_name='审核动作')),
                ('reason', models.CharField(blank=True, default='', max_length=200, verbose_name='操作原因')),
                ('note', models.TextField(blank=True, default='', verbose_name='审核备注')),
                ('old_status', models.CharField(blank=True, default='', max_length=20, verbose_name='原状态')),
                ('new_status', models.CharField(blank=True, default='', max_length=20, verbose_name='新状态')),
                ('violation_details', models.JSONField(blank=True, default=dict, verbose_name='违规详情')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='审核人')),
            ],
            options={
                'verbose_name': '审核日志',
                'verbose_name_plural': '审核日志',
                'db_table': 'review_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SensitiveWord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('word', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='敏感词')),
                ('word_type', models.CharField(choices=[('banned', '禁用词'), ('sensitive', '敏感词'), ('review', '需审核词')], db_index=True, max_length=20, verbose_name='词汇类型')),
                ('category', models.CharField(choices=[('politics', '政治'), ('porn', '色情'), ('violence', '暴力'), ('abuse', '辱骂'), ('ad', '广告'), ('other', '其他')], default='other', max_length=20, verbose_name='分类')),
                ('replacement', models.CharField(blank=True, default='***', max_length=50, verbose_name='替换词')),
                ('severity', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='严重程度')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='是否启用')),
                ('hit_count', models.PositiveIntegerField(default=0, verbose_name='命中次数')),
            ],
            options={
                'verbose_name': '敏感词',
                'verbose_name_plural': '敏感词',
                'db_table': 'sensitive_words',
                'indexes': [models.Index(fields=['word_type', 'is_active'], name='sensitive_w_word_ty_504fea_idx')],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='话题名称')),
                ('slug', models.SlugField(unique=True, verbose_name='URL标识')),
                ('description', models.CharField(blank=True, default='', max_length=200, verbose_name='话题描述')),
                ('cover_image', models.URLField(blank=True, default='', max_length=500, verbose_name='话题封面')),
                ('is_official', models.BooleanField(db_index=True, default=False, verbose_name='是否官方话题')),
                ('is_trending', models.BooleanField(db_index=True, default=False, verbose_name='是否热门')),
                ('is_featured', models.BooleanField(db_index=True, default=False, verbose_name='是否精选话题')),
                ('status', models.CharField(choices=[('pending', '待审核'), ('reviewing', '审核中'), ('approved', '审核通过'), ('rejected', '审核拒绝'), ('banned', '已封禁'), ('suspended', '已暂停')], db_index=True, default='pending', max_length=20, verbose_name='审核状态')),
                ('review_note', models.TextField(blank=True, default='', verbose_name='审核备注')),
                ('reject_reason', models.CharField(blank=True, default='', max_length=200, verbose_name='拒绝原因')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='审核时间')),
                ('post_count', models.PositiveIntegerField(db_index=True, default=0, verbose_name='帖子数量')),
                ('participant_count', models.PositiveIntegerField(default=0, verbose_name='参与人数')),
                ('follow_count', models.PositiveIntegerField(db_index=True, default=0, verbose_name='关注数量')),
                ('view_count', models.PositiveBigIntegerField(default=0, verbose_name='浏览量')),
                ('hot_score', models.FloatField(db_index=True, default=0, verbose_name='热度分数')),
                ('report_count', models.PositiveSmallIntegerField(default=0, verbose_name='举报次数')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_topics', to=settings.AUTH_USER_MODEL, verbose_name='审核人')),
            ],
            options={
                'verbose_name': '话题',
                'verbose_name_plural': '话题',
                'db_table': 'topics',
                'ordering': ['-is_featured', '-hot_score', '-post_count'],
            },
        ),
        migrations.CreateModel(
            name='UserAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('action_type', models.CharField(choices=[('like_post', '点赞帖子'), ('unlike_post', '取消点赞帖子'), ('collect_post', '收藏帖子'), ('uncollect_post', '取消收藏帖子'), ('share_post', '分享帖子'), ('view_post', '浏览帖子'), ('comment_post', '评论帖子'), ('like_comment', '点赞评论'), ('unlike_comment', '取消点赞评论'), ('follow_user', '关注用户'), ('unfollow_user', '取消关注用户'), ('follow_topic', '关注话题'), ('unfollow_topic', '取消关注话题')], db_index=True, max_length=20, verbose_name='行为类型')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('user_agent', models.CharField(blank=True, default='', max_length=200, verbose_name='用户代理')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.comment', verbose_name='评论')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.post', verbose_name='帖子')),
                ('target_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='follower_actions', to=settings.AUTH_USER_MODEL, verbose_name='目标用户')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.topic', verbose_name='话题')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户行为',
                'verbose_name_plural': '用户行为',
                'db_table': 'user_actions',
            },
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_mutual', models.BooleanField(db_index=True, default=False, verbose_name='是否互相关注')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL, verbose_name='关注者')),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL, verbose_name='被关注者')),
            ],
            options={
                'verbose_name': '用户关注',
                'verbose_name_plural': '用户关注',
                'db_table': 'user_follows',
            },
        ),
        migrations.CreateModel(
            name='BlockedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('reason', models.CharField(blank=True, default='', max_length=100, verbose_name='拉黑原因')),
                ('blocked_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by', to=settings.AUTH_USER_MODEL, verbose_name='被拉黑用户')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户黑名单',
                'verbose_name_plural': '用户黑名单',
                'db_table': 'blocked_users',
                'constraints': [models.UniqueConstraint(fields=('user', 'blocked_user'), name='unique_block_relation'), models.CheckConstraint(condition=models.Q(('user', models.F('blocked_user')), _negated=True), name='prevent_self_block')],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('notification_type', models.CharField(choices=[('like_post', '点赞了你的帖子'), ('comment_post', '评论了你的帖子'), ('reply_comment', '回复了你的评论'), ('follow_user', '关注了你'), ('mention', '提到了你'), ('system', '系统通知'), ('post_featured', '帖子被精选'), ('post_approved', '帖子审核通过'), ('post_rejected', '帖子审核未通过')], db_index=True, max_length=20, verbose_name='通知类型')),
                ('title', models.CharField(max_length=100, verbose_name='标题')),
                ('content', models.CharField(max_length=200, verbose_name='内容')),
                ('extra_data', models.JSONField(blank=True, default=dict, verbose_name='额外数据')),
                ('is_read', models.BooleanField(db_index=True, default=False, verbose_name='是否已读')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='阅读时间')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.comment', verbose_name='相关评论')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='接收者')),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL, verbose_name='发送者')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='community.post', verbose_name='相关帖子')),
            ],
            options={
                'verbose_name': '通知消息',
                'verbose_name_plural': '通知消息',
                'db_table': 'notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['receiver', 'is_read', '-created_at'], name='notificatio_receive_a72a41_idx'), models.Index(fields=['notification_type', '-created_at'], name='notificatio_notific_498289_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['post', 'is_deleted', '-created_at'], name='comments_post_id_ba8c91_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['author', '-created_at'], name='comments_author__f43d67_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['parent', '-created_at'], name='comments_parent__b79743_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author', 'status', '-published_at'], name='posts_author__bebd6a_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['category', 'status', '-hot_score'], name='posts_categor_8f457d_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['status', 'review_priority', '-created_at'], name='posts_status_f3088d_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-last_active_at'], name='posts_last_ac_892ee7_idx'),
        ),
        migrations.AddIndex(
            model_name='postcollection',
            index=models.Index(fields=['user', 'folder', '-created_at'], name='post_collec_user_id_8afa76_idx'),
        ),
        migrations.AddConstraint(
            model_name='postcollection',
            constraint=models.UniqueConstraint(fields=('user', 'post'), name='unique_post_collection'),
        ),
        migrations.AddIndex(
            model_name='postmedia',
            index=models.Index(fields=['post', 'media_type'], name='post_medias_post_id_9f56a6_idx'),
        ),
        migrations.AddIndex(
            model_name='postview',
            index=models.Index(fields=['user', 'post'], name='post_views_user_id_a990ee_idx'),
        ),
        migrations.AddIndex(
            model_name='postview',
            index=models.Index(fields=['post', '-created_at'], name='post_views_post_id_cc8b0b_idx'),
        ),
        migrations.AddConstraint(
            model_name='postview',
            constraint=models.UniqueConstraint(fields=('user', 'post'), name='unique_user_post_view'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['status', '-created_at'], name='reports_status_d7deb7_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['content_type', 'content_id'], name='reports_content_458af3_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['reporter', '-created_at'], name='reports_reporte_25ecfc_idx'),
        ),
        migrations.AddConstraint(
            model_name='report',
            constraint=models.UniqueConstraint(fields=('reporter', 'content_type', 'content_id'), name='unique_report_per_content'),
        ),
        migrations.AddIndex(
            model_name='reviewlog',
            index=models.Index(fields=['content_type', 'content_id', '-created_at'], name='review_logs_content_7236a6_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewlog',
            index=models.Index(fields=['reviewer', '-created_at'], name='review_logs_reviewe_7f077c_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['status', '-hot_score'], name='topics_status_0978af_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['creator', 'status'], name='topics_creator_c2aa3c_idx'),
        ),
        migrations.AddIndex(
            model_name='topic',
            index=models.Index(fields=['is_trending', '-updated_at'], name='topics_is_tren_b68d2e_idx'),
        ),
        migrations.AddIndex(
            model_name='useraction',
            index=models.Index(fields=['user', 'action_type', '-created_at'], name='user_action_user_id_bbb15a_idx'),
        ),
        migrations.AddIndex(
            model_name='useraction',
            index=models.Index(fields=['post', 'action_type'], name='user_action_post_id_15f025_idx'),
        ),
        migrations.AddIndex(
            model_name='useraction',
            index=models.Index(fields=['target_user', 'action_type'], name='user_action_target__1377ec_idx'),
        ),
        migrations.AddConstraint(
            model_name='useraction',
            constraint=models.UniqueConstraint(condition=models.Q(('action_type', 'like_post')), fields=('user', 'post'), name='unique_post_like'),
        ),
        migrations.AddConstraint(
            model_name='useraction',
            constraint=models.UniqueConstraint(condition=models.Q(('action_type', 'collect_post')), fields=('user', 'post'), name='unique_post_collect'),
        ),
        migrations.AddConstraint(
            model_name='useraction',
            constraint=models.UniqueConstraint(condition=models.Q(('action_type', 'like_comment')), fields=('user', 'comment'), name='unique_comment_like'),
        ),
        migrations.AddConstraint(
            model_name='useraction',
            constraint=models.UniqueConstraint(condition=models.Q(('action_type', 'follow_user')), fields=('user', 'target_user'), name='unique_user_follow'),
        ),
        migrations.AddConstraint(
            model_name='useraction',
            constraint=models.UniqueConstraint(condition=models.Q(('action_type', 'follow_topic')), fields=('user', 'topic'), name='unique_topic_follow'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['follower', '-created_at'], name='user_follow_followe_5ed1bd_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['following', '-created_at'], name='user_follow_followi_7c1ee1_idx'),
        ),
        migrations.AddIndex(
            model_name='userfollow',
            index=models.Index(fields=['is_mutual'], name='user_follow_is_mutu_3b51e6_idx'),
        ),
        migrations.AddConstraint(
            model_name='userfollow',
            constraint=models.UniqueConstraint(fields=('follower', 'following'), name='unique_follow_relation'),
        ),
        migrations.AddConstraint(
            model_name='userfollow',
            constraint=models.CheckConstraint(condition=models.Q(('follower', models.F('following')), _negated=True), name='prevent_self_follow'),
        ),
    ]
